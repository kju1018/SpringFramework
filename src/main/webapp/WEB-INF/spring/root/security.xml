<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 보안을 체크할 필요가 없는 경로 설정  -->
	<security:http pattern="/resources/**" security="none"/>
	
	<!-- 보안 필터 체인(프로세싱) 설정 -->
	<security:http>
		<!-- 요청 경로 체크 -->
		<!-- 이 경로로 요청했을떄는 이 Role을 갖고 있어야한다 -->
		<security:intercept-url pattern="/exam08/admin/**" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/exam08/user/**" access="hasRole('ROLE_USER')"/>
		<security:intercept-url pattern="/**" access="permitAll"/>
		
		<!-- 로그인/로그아웃 설정 -->
	
		<!-- login-processing-url : View 페이지의 <form action="/url"> 에서 지정한 URL  -->
		
		<!-- 로그인이 안되어있으면 로그인 폼 제공 Controller의 /exam08/loginForm 경로 제공 -->
		<!-- input name="uid" input name="upassword" 에 입력된 값을 시큐리티가 username, password로 받아들임 -->
		<!-- 스프링 시큐리티가 기본적으로 처리하는 로그인 url Controller의 경로가 아님  -->
		<!--exam08/login이라도 안넣는 이유 기본이 /login http://localhost:8080/webapp/login을 잡아줌  -->
		<!--form mehtod="post" action="/login" 여기 login  -->
		<security:form-login login-page="/exam08/loginForm"
							 username-parameter="uid"
							 password-parameter="upassword"
							 login-processing-url="/login"
							 authentication-success-handler-ref="authSuccessHandler"
							 authentication-failure-handler-ref="authFailureHandler" 
							 />
							 <!--  authentication-failure-url="/exam08/loginForm" -->
							 <!-- -->
							 <!-- login/ logout을 바꿀 수 있으나 우리가 다시 코드를 작성해야함 -->
							 <!-- 이건 security에서 이미 잡아놓음 -->
							 <!-- authentication-failure-forward-url 얘는 서버에서 해주는것 -->
							 <!-- authentication-failure-url 이건 재요청( 리다이렉트 ) -->
		<!-- <security:csrf disabled="true"/> --> 
		
		<!-- 스프링 시큐리티가 기본적으로 사용한 로그아웃 경로, POST 방식으로 요청해야함 -->
		<security:logout logout-url="/logout"/>
		
		<!-- 로그인 중복 처리 설정 -->
		<security:session-management>
			<!-- 기존 브라우저는 강제 아웃, 다른 브라우저는 로그인 -->
			<security:concurrency-control max-sessions="1"
										error-if-maximum-exceeded="false"
										expired-url="/exam08/loginForm"/>
										
			<!-- 기존 브라우저는 로그인 유지, 다른 브라우저는 에러 메시지 출력 -->
			<!-- <security:concurrency-control max-sessions="1"
										error-if-maximum-exceeded="true"/> -->
		</security:session-management>
		
		<!-- 403에러가 발행할 때 이동할 페이지 -->
		<security:access-denied-handler error-page="/exam08/error403"/>
	</security:http>
	
	<!-- 사용자 인증 처리를 위한 설정 (DB 테이블 관련) -->
	<security:authentication-manager>
		<security:authentication-provider ref="daoAuthenticationProvider"/>
	</security:authentication-manager>
	
	<!-- 빈태그로 생성된 객체를 daoAuthenticationProvider에다 대입해준다  
	어떤 클래스를 이용해서?-->
	<bean id="daoAuthenticationProvider"
		  class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="passwordEncoder" ref="bCryptPasswordEncoder"/>
		<property name="userDetailsService" ref="jdbcUserService"/>
		<!-- "userDetailsService"는 유저가 어떤 id password를 갖고 있는지 체크 -->
		<!-- DaoAuthenticationProvider는  userDetailsService가 제공해주는 db사용? --> 
		<property name="authoritiesMapper" ref="roleHierarchyAuthoritiesMapper"/>
		<!-- authoritiesMapper는 유저가 어떤 권한을 갖고 있는지 체크 -->
	</bean>
	
	<bean id="bCryptPasswordEncoder" 
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
	<security:jdbc-user-service id="jdbcUserService"
								data-source-ref="dataSource"
								users-by-username-query="select userid, userpassword, userenabled from users where userid=?"
								authorities-by-username-query="select userid, userauthority from users where userid=?"/>
								
	<bean id="roleHierarchyAuthoritiesMapper"
		  class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<!-- 생성자 매개값 제공 -->
		<constructor-arg>
			<bean class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
				<property name="hierarchy">
					<value>
						ROLE_ADMIN > ROLE_MANAGER
						ROLE_MANAGER > ROLE_USER
					</value>
				</property>
			</bean>
		</constructor-arg>	    
	</bean>
	
	
	<!--  로그인 성공했을때와 실패했을때 콜백되는 객채 설정 -->
	<bean id="authSuccessHandler"
		  class="com.mycompany.webapp.security.AuthSuccessHandler"></bean>
	<bean id="authFailureHandler"
	 	  class="com.mycompany.webapp.security.AuthFailureHandler">
	 	  
	 	  <!-- 실패했을때 어디로 이동해라 -->
	<property name="defaultFailureUrl" value="/exam08/loginForm"/>
	</bean>
</beans>
